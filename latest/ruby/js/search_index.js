var search_data = {"index":{"searchIndex":["quark","mdk","mdk","mdkimpl","session","sessionimpl","datawirequarkcore","tlsinit","mdk()","mdkimpl()","session()","sessionimpl()","_tlsinit()","__init_fields__()","__init_fields__()","__init_fields__()","__init_fields__()","__init_fields__()","_current_interaction()","_enabled()","_get()","_getclass()","_getclass()","_getclass()","_getfield()","_getfield()","_getfield()","_level()","_log()","_resolve()","_resolvedcallback()","_setfield()","_setfield()","_setfield()","_timeout()","critical()","critical()","debug()","debug()","error()","error()","externalize()","externalize()","fail_interaction()","fail_interaction()","finish_interaction()","finish_interaction()","get()","getdiscoveryfactory()","getfailurepolicy()","getvalue()","has()","info()","info()","init()","inject()","inject()","interact()","interact()","join()","join()","mdk()","new()","new()","new()","new()","new()","register()","register()","resolve()","resolve()","resolve_async()","resolve_async()","resolve_until()","resolve_until()","route()","route()","session()","session()","set()","start()","start()","start()","start_interaction()","start_interaction()","stop()","stop()","trace()","trace()","warn()","warn()"],"longSearchIndex":["quark","quark::mdk","quark::mdk::mdk","quark::mdk::mdkimpl","quark::mdk::session","quark::mdk::sessionimpl","quark::mdk::sessionimpl::datawirequarkcore","quark::mdk::tlsinit","quark::mdk::mdk()","quark::mdk::mdkimpl()","quark::mdk::session()","quark::mdk::sessionimpl()","quark::mdk::_tlsinit()","quark::mdk::mdk#__init_fields__()","quark::mdk::mdkimpl#__init_fields__()","quark::mdk::session#__init_fields__()","quark::mdk::sessionimpl#__init_fields__()","quark::mdk::tlsinit#__init_fields__()","quark::mdk::sessionimpl#_current_interaction()","quark::mdk::sessionimpl#_enabled()","quark::mdk::_get()","quark::mdk::mdkimpl#_getclass()","quark::mdk::sessionimpl#_getclass()","quark::mdk::tlsinit#_getclass()","quark::mdk::mdkimpl#_getfield()","quark::mdk::sessionimpl#_getfield()","quark::mdk::tlsinit#_getfield()","quark::mdk::sessionimpl::_level()","quark::mdk::sessionimpl#_log()","quark::mdk::sessionimpl#_resolve()","quark::mdk::sessionimpl#_resolvedcallback()","quark::mdk::mdkimpl#_setfield()","quark::mdk::sessionimpl#_setfield()","quark::mdk::tlsinit#_setfield()","quark::mdk::mdkimpl#_timeout()","quark::mdk::session#critical()","quark::mdk::sessionimpl#critical()","quark::mdk::session#debug()","quark::mdk::sessionimpl#debug()","quark::mdk::session#error()","quark::mdk::sessionimpl#error()","quark::mdk::session#externalize()","quark::mdk::sessionimpl#externalize()","quark::mdk::session#fail_interaction()","quark::mdk::sessionimpl#fail_interaction()","quark::mdk::session#finish_interaction()","quark::mdk::sessionimpl#finish_interaction()","quark::mdk::sessionimpl#get()","quark::mdk::mdkimpl#getdiscoveryfactory()","quark::mdk::mdkimpl#getfailurepolicy()","quark::mdk::tlsinit#getvalue()","quark::mdk::sessionimpl#has()","quark::mdk::session#info()","quark::mdk::sessionimpl#info()","quark::mdk::init()","quark::mdk::session#inject()","quark::mdk::sessionimpl#inject()","quark::mdk::session#interact()","quark::mdk::sessionimpl#interact()","quark::mdk::mdk#join()","quark::mdk::mdkimpl#join()","quark::mdk()","quark::mdk::mdk::new()","quark::mdk::mdkimpl::new()","quark::mdk::session::new()","quark::mdk::sessionimpl::new()","quark::mdk::tlsinit::new()","quark::mdk::mdk#register()","quark::mdk::mdkimpl#register()","quark::mdk::session#resolve()","quark::mdk::sessionimpl#resolve()","quark::mdk::session#resolve_async()","quark::mdk::sessionimpl#resolve_async()","quark::mdk::session#resolve_until()","quark::mdk::sessionimpl#resolve_until()","quark::mdk::session#route()","quark::mdk::sessionimpl#route()","quark::mdk::mdk#session()","quark::mdk::mdkimpl#session()","quark::mdk::sessionimpl#set()","quark::mdk::start()","quark::mdk::mdk#start()","quark::mdk::mdkimpl#start()","quark::mdk::session#start_interaction()","quark::mdk::sessionimpl#start_interaction()","quark::mdk::mdk#stop()","quark::mdk::mdkimpl#stop()","quark::mdk::session#trace()","quark::mdk::sessionimpl#trace()","quark::mdk::session#warn()","quark::mdk::sessionimpl#warn()"],"info":[["Quark","","Quark.html","","<p>Quark 1.0.443 run at 2016-09-20 19:59:40.055386\n"],["Quark::Mdk","","Quark/Mdk.html","",""],["Quark::Mdk::MDK","","Quark/Mdk/MDK.html","","<p>The MDK API consists of two interfaces: MDK and Session. The MDK interface\nholds globally scoped APIs …\n"],["Quark::Mdk::MDKImpl","","Quark/Mdk/MDKImpl.html","",""],["Quark::Mdk::Session","","Quark/Mdk/Session.html","","<p>A session provides a lightweight sequential context that a microservice can\nuse in the context of any …\n"],["Quark::Mdk::SessionImpl","","Quark/Mdk/SessionImpl.html","",""],["Quark::Mdk::SessionImpl::DatawireQuarkCore","","Quark/Mdk/SessionImpl/DatawireQuarkCore.html","",""],["Quark::Mdk::TLSInit","","Quark/Mdk/TLSInit.html","",""],["MDK","Quark::Mdk","Quark/Mdk.html#method-c-MDK","()",""],["MDKImpl","Quark::Mdk","Quark/Mdk.html#method-c-MDKImpl","()",""],["Session","Quark::Mdk","Quark/Mdk.html#method-c-Session","()",""],["SessionImpl","Quark::Mdk","Quark/Mdk.html#method-c-SessionImpl","()",""],["_TLSInit","Quark::Mdk","Quark/Mdk.html#method-c-_TLSInit","()",""],["__init_fields__","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-i-__init_fields__","()",""],["__init_fields__","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-__init_fields__","()",""],["__init_fields__","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-__init_fields__","()",""],["__init_fields__","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-__init_fields__","()",""],["__init_fields__","Quark::Mdk::TLSInit","Quark/Mdk/TLSInit.html#method-i-__init_fields__","()",""],["_current_interaction","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_current_interaction","()",""],["_enabled","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_enabled","(level)",""],["_get","Quark::Mdk","Quark/Mdk.html#method-c-_get","(env, name, value)",""],["_getClass","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-_getClass","()",""],["_getClass","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_getClass","()",""],["_getClass","Quark::Mdk::TLSInit","Quark/Mdk/TLSInit.html#method-i-_getClass","()",""],["_getField","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-_getField","(name)",""],["_getField","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_getField","(name)",""],["_getField","Quark::Mdk::TLSInit","Quark/Mdk/TLSInit.html#method-i-_getField","(name)",""],["_level","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-c-_level","(level)",""],["_log","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_log","(level, category, text)",""],["_resolve","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_resolve","(service, version)",""],["_resolvedCallback","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_resolvedCallback","(result)",""],["_setField","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-_setField","(name, value)",""],["_setField","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-_setField","(name, value)",""],["_setField","Quark::Mdk::TLSInit","Quark/Mdk/TLSInit.html#method-i-_setField","(name, value)",""],["_timeout","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-_timeout","()",""],["critical","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-critical","(category, text)","<p>Record a log entry at the CRITICAL logging level.\n"],["critical","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-critical","(category, text)",""],["debug","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-debug","(category, text)","<p>Record a log entry at the DEBUG logging level.\n"],["debug","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-debug","(category, text)",""],["error","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-error","(category, text)","<p>Record a log entry at the ERROR logging level.\n"],["error","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-error","(category, text)",""],["externalize","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-externalize","()","<p>Returns an externalized representation of the distributed session.\n"],["externalize","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-externalize","()",""],["fail_interaction","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-fail_interaction","(message)","<p>Record an interaction as failed.\n<p>This will update circuit breaker state for the remote nodes, as well …\n"],["fail_interaction","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-fail_interaction","(message)",""],["finish_interaction","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-finish_interaction","()","<p>Finish an interaction.\n<p>This marks an interaction as completed.\n"],["finish_interaction","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-finish_interaction","()",""],["get","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-get","(property)",""],["getDiscoveryFactory","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-getDiscoveryFactory","(env)","<p>Choose DiscoverySource based on environment variables.\n"],["getFailurePolicy","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-getFailurePolicy","(runtime)","<p>Choose FailurePolicy based on environment variables.\n"],["getValue","Quark::Mdk::TLSInit","Quark/Mdk/TLSInit.html#method-i-getValue","()",""],["has","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-has","(property)",""],["info","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-info","(category, text)","<p>Record a log entry at the INFO logging level.\n"],["info","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-info","(category, text)",""],["init","Quark::Mdk","Quark/Mdk.html#method-c-init","()","<p>Create an unstarted instance of the MDK.\n"],["inject","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-inject","()","<p>Grabs the encoded context.\n"],["inject","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-inject","()",""],["interact","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-interact","(callable)","<p>This is a convenience API that will perform start_interaction() followed by\ncallable(ssn) followed by …\n"],["interact","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-interact","(cmd)",""],["join","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-i-join","(encodedContext)","<p>Create a new Session and join it to a distributed trace.\n"],["join","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-join","(encodedContext)",""],["mdk","Quark","Quark.html#method-c-mdk","()",""],["new","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-c-new","()",""],["new","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-c-new","(runtime)",""],["new","Quark::Mdk::Session","Quark/Mdk/Session.html#method-c-new","()",""],["new","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-c-new","(mdk, encodedContext)",""],["new","Quark::Mdk::TLSInit","Quark/Mdk/TLSInit.html#method-c-new","()",""],["register","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-i-register","(service, version, address)","<p>Registers a service endpoint with the discovery system. This can be called\nat any point, however registered …\n"],["register","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-register","(service, version, address)",""],["resolve","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-resolve","(service, version)","<p>Locate a compatible service instance.\n"],["resolve","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-resolve","(service, version)",""],["resolve_async","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-resolve_async","(service, version)","<p>Locate a compatible service instance asynchronously. The result is returned\nas a promise.\n"],["resolve_async","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-resolve_async","(service, version)",""],["resolve_until","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-resolve_until","(service, version, timeout)","<p>Locate a compatible service instance with a non-default timeout.\n"],["resolve_until","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-resolve_until","(service, version, timeout)",""],["route","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-route","(service, version, target, targetVersion)","<p>EXPERIMENTAL; requires MDK_EXPERIMENTAL=1 environment variable to function.\n<p>Override service resolution …\n"],["route","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-route","(service, version, target, targetVersion)",""],["session","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-i-session","()","<p>Creates a new Session. A Session created in this way will result in a new\ndistributed trace. This should …\n"],["session","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-session","()",""],["set","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-set","(property, value)",""],["start","Quark::Mdk","Quark/Mdk.html#method-c-start","()","<p>Create a started instance of the MDK. This is equivalent to calling init()\nfollowed by start() on the …\n"],["start","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-i-start","()","<p>Start the MDK. An MDK instance will not communicate with foundational\nservices unless it is started. …\n"],["start","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-start","()",""],["start_interaction","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-start_interaction","()","<p>Start an interaction with a remote service.\n<p>The session tracks any nodes resolved during an interactin …\n"],["start_interaction","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-start_interaction","()",""],["stop","Quark::Mdk::MDK","Quark/Mdk/MDK.html#method-i-stop","()","<p>Stop the MDK. When the MDK stops unregisters any service endpoints from the\ndiscovery system. This should …\n"],["stop","Quark::Mdk::MDKImpl","Quark/Mdk/MDKImpl.html#method-i-stop","()",""],["trace","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-trace","(level)","<p>EXPERIMENTAL: Set the logging level for the session.\n"],["trace","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-trace","(level)",""],["warn","Quark::Mdk::Session","Quark/Mdk/Session.html#method-i-warn","(category, text)","<p>Record a log entry at the WARN logging level.\n"],["warn","Quark::Mdk::SessionImpl","Quark/Mdk/SessionImpl.html#method-i-warn","(category, text)",""]]}}